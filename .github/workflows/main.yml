name: Supremo CICD

on:
  push:
    branches:
      - main
      
jobs:   
  build_supremo_app:
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      REACT_APP_CARLIST_URL: http://144.24.107.76/car-service-redis/cars
      REACT_APP_CARAPP_LOGINAUTH_URL: http://144.24.107.76/user-service-redis/authn
      REACT_APP_GET_USER_BY_ID: http://144.24.107.76/user-service-redis/users/
      REACT_APP_CREATE_ORDER_API: http://144.24.107.76/order-service/create-order
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV 

      - name: Checkout
        uses: actions/checkout@v3

      - name: Get or create an OCIR Repository
        uses: oracle-actions/get-ocir-repository@v1.2.1
        id: get-ocir-repository
        with:
          name: frontend/react-supremo
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.get-ocir-repository.outputs.repo_path }}
          tags: |
            type=sha,prefix=

      - name: Login to OCI Container Registry
        uses: docker/login-action@v3
        with:
          registry: bom.ocir.io
          username: ${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        working-directory: frontend
        run: npm list

      - name: Install dependencies
        working-directory: frontend
        run: npm install

      - name: Build supremo app
        working-directory: frontend
        run: CI=false npm run build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: frontend/.
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ steps.get-ocir-repository.outputs.repo_path }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    runs-on: ubuntu-latest
    needs:
      - build_supremo_app
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get or create an OCIR Repository
        uses: oracle-actions/get-ocir-repository@v1.2.1
        id: get-ocir-repository
        with:
          name: frontend/react-supremo
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.get-ocir-repository.outputs.repo_path }}
          tags: |
            type=sha,prefix=

        
      - name: Login to OCI Container Registry
        uses: docker/login-action@v3
        with:
          registry: bom.ocir.io
          username: ${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_AUTH_TOKEN }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.get-ocir-repository.outputs.repo_path }}@sha256:%s ' *)  
                
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ steps.get-ocir-repository.outputs.repo_path }}:${{ steps.meta.outputs.version }}


  deploy_app:
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    runs-on: ubuntu-latest
    needs:
      - merge
    steps:
      - name: Get or create an OCIR Repository
        uses: oracle-actions/get-ocir-repository@v1.2.1
        id: get-ocir-repository
        with:
          name: frontend/react-supremo
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.get-ocir-repository.outputs.repo_path }}
          tags: |
            type=sha,prefix=

      - name: Deploy via OCI DevOps Deployment Pipeline
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        with:
            command: devops deployment create-pipeline-deployment --pipeline-id ${{ secrets.OCI_DEVOPS_PIPELINE_ID }} --deployment-arguments "{\"items\":[{\"name\":\"IMG\",\"value\":\"${{ steps.get-ocir-repository.outputs.repo_path }}:${{ steps.meta.outputs.version }}\"}]}"
            silent: true